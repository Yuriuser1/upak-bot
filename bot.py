import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É", callback_data='order_packaging'),
        InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ UPAK", callback_data='about')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UPAK! –ú—ã –ø–æ–º–æ–≥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º –Ω–∞ Wildberries –∏ Ozon —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò.", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'order_packaging':
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —É–ø–∞–∫–æ–≤–∫—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
    elif query.data == 'about':
        await query.edit_message_text("UPAK ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –æ–ø–∏—Å–∞–Ω–∏–π, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.upak.space")

# –ó–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç Deep Agent (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º –≤—ã–∑–æ–≤–æ–º)
def generate_card_data(product_text: str) -> dict:
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, OpenAI / Deep Agent)
    return {
        "title": f"üî∏ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è: {product_text}",
        "description": f"üí¨ –≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ò–ò –¥–ª—è: {product_text}",
        "features": ["‚ö° –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", "üîí –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞", "üåü –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥"],
        "image_url": "https://via.placeholder.com/512x512.png?text=UPAK"
    }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    await update.message.reply_text("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ø–∞–∫–æ–≤–∫—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10‚Äì15 —Å–µ–∫—É–Ω–¥.")

    data = generate_card_data(user_text)

    caption = f"*{data['title']}*\n\n{data['description']}\n\n" + "\n".join(data['features'])

    await update.message.reply_photo(photo=data['image_url'], caption=caption, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(msg="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_error_handler(error_handler)

if __name__ == "__main__":
    app.run_polling()
