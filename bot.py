import logging
import os
from datetime import datetime
import requests
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from pydantic import BaseModel, Field
from dotenv import load_dotenv
import json
import redis
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
BITRIX24_WEBHOOK = os.getenv("BITRIX24_WEBHOOK")
YANDEX_CHECKOUT_KEY = os.getenv("YANDEX_CHECKOUT_KEY")
YANDEX_CHECKOUT_SHOP_ID = os.getenv("YANDEX_CHECKOUT_SHOP_ID")
YANDEX_METRIKA_ID = os.getenv("YANDEX_METRIKA_ID")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_TOKEN, YANDEX_GPT_API_KEY]):
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_TOKEN, YANDEX_GPT_API_KEY")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (—Å fallback, –µ—Å–ª–∏ REDIS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
try:
    redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True)
    redis_client.ping()
except redis.RedisError as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å.")
    redis_client = None

# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
class ProductCard(BaseModel):
    title: str = Field(max_length=100)
    description: str = Field(max_length=1000)
    features: list[str]
    image_url: str

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ Yandex GPT
async def generate_card_data(product_text: str, user_id: str) -> ProductCard:
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {YANDEX_GPT_API_KEY}"}
        payload = {
            "model": "yandexgpt",
            "messages": [
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Wildberries –∏ Ozon. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤), –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤), —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ (3-5 –ø—É–Ω–∫—Ç–æ–≤) –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π Canva API)."},
                {"role": "user", "content": f"–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è: {product_text}"}
            ]
        }
        try:
            async with session.post("https://api.yandex.cloud/gpt/v1/completions", json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    card_data = json.loads(data["choices"][0]["message"]["content"])
                    return ProductCard(**card_data)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT API: {response.status}")
                    return ProductCard(
                        title="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        features=["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"],
                        image_url="https://via.placeholder.com/512x512.png?text=Error"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex GPT: {e}")
            return ProductCard(
                title="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                features=["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"],
                image_url="https://via.placeholder.com/512x512.png?text=Error"
            )

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞
async def add_lead_to_bitrix24(user_id: str, username: str, service: str):
    if not BITRIX24_WEBHOOK:
        logger.warning("Bitrix24 webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞")
        return
    payload = {
        "fields": {
            "TITLE": f"–õ–∏–¥ –æ—Ç Telegram: {username}",
            "SOURCE_ID": "TELEGRAM",
            "ASSIGNED_BY_ID": 1,
            "COMMENTS": f"–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —É—Å–ª—É–≥–µ: {service}",
            "UF_CRM_1634567890": user_id
        }
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BITRIX24_WEBHOOK}/crm.lead.add.json", json=payload) as response:
                if response.status == 200:
                    logger.info(f"–õ–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {username}, —É—Å–ª—É–≥–∞: {service}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ Bitrix24: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Yandex.Checkout
async def create_payment_link(user_id: str, service: str, tariff: str, amount: float) -> str:
    if not (YANDEX_CHECKOUT_KEY and YANDEX_CHECKOUT_SHOP_ID):
        logger.warning("Yandex.Checkout –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
        return "https://upak.space/payment-not-configured"
    payment_id = str(uuid.uuid4())
    payload = {
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": "https://upak.space/payment-success"},
        "capture": True,
        "description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff} –¥–ª—è {service} (ID: {user_id})",
        "metadata": {"user_id": user_id, "service": service, "tariff": tariff}
    }
    headers = {
        "Idempotency-Key": payment_id,
        "Authorization": f"Bearer {YANDEX_CHECKOUT_KEY}"
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"https://api.yookassa.ru/v3/payments",
            json=payload,
            headers=headers
        ) as response:
            if response.status == 200:
                data = await response.json()
                return data["confirmation"]["confirmation_url"]
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Yandex.Checkout: {response.status}")
                return "https://upak.space/payment-error"

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Yandex Metrika
async def track_event(user_id: str, event: str):
    if not YANDEX_METRIKA_ID:
        logger.warning("Yandex Metrika –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥")
        return
    async with aiohttp.ClientSession() as session:
        try:
            await session.get(
                f"https://mc.yandex.ru/metrika/tag.js?counter={YANDEX_METRIKA_ID}&event={event}&user_id={user_id}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Yandex Metrika: {e}")

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "Unknown"
    await track_event(user_id, "start_command")
    await add_lead_to_bitrix24(user_id, username, "–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")

    keyboard = [
        [
            InlineKeyboardButton("üì¶ –£–ø–∞–∫–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data='order_packaging'),
            InlineKeyboardButton("ü§ñ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", callback_data='ai_assistants')
        ],
        [
            InlineKeyboardButton("üìù –ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", callback_data='content_automation'),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data='predictive_analytics')
        ],
        [
            InlineKeyboardButton("üí¨ –ß–∞—Ç-–±–æ—Ç—ã", callback_data='chatbots'),
            InlineKeyboardButton("‚ÑπÔ∏è –û UPAK", callback_data='about')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UPAK! üöÄ\n"
        "–ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ Wildberries –∏ Ozon —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏."
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    username = query.from_user.username or "Unknown"
    await query.answer()

    tariffs = {
        "order_packaging": {"basic": 15000, "premium": 35000},
        "ai_assistants": {"basic": 25000, "premium": 50000},
        "content_automation": {"startup": 30000, "agency": 100000},
        "predictive_analytics": {"small_store": 50000, "large_store": 150000},
        "chatbots": {"standard": 40000, "corporate": 120000}
    }

    service_descriptions = {
        "order_packaging": (
            "üì¶ *–£–ø–∞–∫–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫*\n"
            "–°–æ–∑–¥–∞–µ–º SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è WB –∏ Ozon.\n"
            "- –ë–∞–∑–æ–≤—ã–π (15,000 ‚ÇΩ/–º–µ—Å): –ó–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "- –ü—Ä–µ–º–∏—É–º (35,000 ‚ÇΩ/–º–µ—Å): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        ),
        "ai_assistants": (
            "ü§ñ *–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã*\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞–º, –æ—Ç—á–µ—Ç—ã.\n"
            "- –ë–∞–∑–æ–≤—ã–π (25,000 ‚ÇΩ/–º–µ—Å): –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n"
            "- –ü—Ä–µ–º–∏—É–º (50,000 ‚ÇΩ/–º–µ—Å): –ì–ª—É–±–æ–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        ),
        "content_automation": (
            "üìù *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞*\n"
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤, —Å—Ç–∞—Ç–µ–π, –æ–ø–∏—Å–∞–Ω–∏–π.\n"
            "- –°—Ç–∞—Ä—Ç–∞–ø (30,000 ‚ÇΩ/–º–µ—Å): –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
            "- –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ (100,000 ‚ÇΩ/–º–µ—Å): –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        ),
        "predictive_analytics": (
            "üìä *–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n"
            "–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.\n"
            "- –ú–∞–ª—ã–π –º–∞–≥–∞–∑–∏–Ω (50,000 ‚ÇΩ/–º–µ—Å): –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n"
            "- –ö—Ä—É–ø–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω (150,000 ‚ÇΩ/–º–µ—Å): –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        ),
        "chatbots": (
            "üí¨ *–ò–ò-—á–∞—Ç–±–æ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂*\n"
            "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤, –ø—Ä–æ–¥–∞–∂–∏ 24/7.\n"
            "- –°—Ç–∞–Ω–¥–∞—Ä—Ç (40,000 ‚ÇΩ/–º–µ—Å): –ë–∞–∑–æ–≤—ã–π —á–∞—Ç–±–æ—Ç.\n"
            "- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π (120,000 ‚ÇΩ/–º–µ—Å): –û–º–Ω–∏–∫–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å, CRM.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        ),
        "about": (
            "‚ÑπÔ∏è *–û UPAK*\n"
            "–ú—ã ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ WB –∏ Ozon. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ–Ω—Ç–µ–Ω—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —á–∞—Ç–±–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://upak.space\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@upak.space"
        )
    }

    if query.data in tariffs:
        await add_lead_to_bitrix24(user_id, username, query.data)
        await track_event(user_id, f"select_service_{query.data}")
        keyboard = [
            [InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π" if query.data != "content_automation" else "–°—Ç–∞—Ä—Ç–∞–ø", callback_data=f"{query.data}_basic")],
            [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º" if query.data not in ["content_automation", "predictive_analytics", "chatbots"] else "–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ" if query.data == "content_automation" else "–ö—Ä—É–ø–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω" if query.data == "predictive_analytics" else "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π", callback_data=f"{query.data}_premium")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(service_descriptions[query.data], reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == 'about':
        await query.edit_message_text(service_descriptions['about'], parse_mode='Markdown')
    elif query.data.endswith('_basic') or query.data.endswith('_premium'):
        service, tariff = query.data.rsplit('_', 1)
        amount = tariffs[service][tariff]
        payment_url = await create_payment_link(user_id, service, tariff, amount)
        await add_lead_to_bitrix24(user_id, username, f"{service}_{tariff}_payment")
        await track_event(user_id, f"payment_initiated_{service}_{tariff}")
        keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ *{tariff.capitalize()}* –¥–ª—è —É—Å–ª—É–≥–∏ *{service}*. –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount:,} ‚ÇΩ/–º–µ—Å.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup, parse_mode='Markdown')
    elif query.data == 'demo':
        if redis_client:
            redis_client.setex(f"demo_{user_id}", 3600, json.dumps({"status": "active", "timestamp": datetime.utcnow().isoformat()}))
        else:
            logger.warning("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–µ–º–æ-—Ä–µ–∂–∏–º –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        await query.edit_message_text("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–≤ —É—Å–ª—É–≥—É.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "Unknown"
    user_text = update.message.text
    await track_event(user_id, "text_input")

    demo_status = redis_client.get(f"demo_{user_id}") if redis_client else None
    if demo_status and json.loads(demo_status).get("status") == "active":
        await update.message.reply_text("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–∫–∞—Ä—Ç–æ—á–∫—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10‚Äì15 —Å–µ–∫—É–Ω–¥.")
        card = await generate_card_data(user_text, user_id)
        caption = f"*{card.title}*\n\n{card.description}\n\n" + "\n".join(card.features)
        await update.message.reply_photo(photo=card.image_url, caption=caption, parse_mode='Markdown')
        keyboard = [[InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='order_packaging')]]
        await update.message.reply_text("–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–∞—Ä—Ç–æ—á–∫–∞? –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–µ–º–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ /start.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    if update and hasattr(update, 'effective_user'):
        await track_event(str(update.effective_user.id), "error")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@upak.space")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(CommandHandler("demo", button_handler, filters=filters.Regex('^demo$')))
app.add_error_handler(error_handler)

if __name__ == "__main__":
    app.run_polling()
