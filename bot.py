import logging
import os
from datetime import datetime
import requests
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from pydantic import BaseModel, Field
from dotenv import load_dotenv
import json
import redis
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
BITRIX24_WEBHOOK = os.getenv("BITRIX24_WEBHOOK")
YANDEX_CHECKOUT_KEY = os.getenv("YANDEX_CHECKOUT_KEY")
YANDEX_CHECKOUT_SHOP_ID = os.getenv("YANDEX_CHECKOUT_SHOP_ID")
YANDEX_METRIKA_ID = os.getenv("YANDEX_METRIKA_ID")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_TOKEN, YANDEX_GPT_API_KEY]):
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_TOKEN, YANDEX_GPT_API_KEY")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (—Å fallback, –µ—Å–ª–∏ REDIS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
try:
    redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True)
    redis_client.ping()
except redis.RedisError as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å.")
    redis_client = None

# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
class ProductCard(BaseModel):
    title: str = Field(max_length=100)
    description: str = Field(max_length=1000)
    features: list[str]
    image_url: str

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ Yandex GPT
async def generate_card_data(product_text: str, user_id: str) -> ProductCard:
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {YANDEX_GPT_API_KEY}"}
        payload = {
            "model": "yandexgpt",
            "messages": [
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Wildberries –∏ Ozon. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤), –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤), —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ (3-5 –ø—É–Ω–∫—Ç–æ–≤) –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π Canva API)."},
                {"role": "user", "content": f"–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è: {product_text}"}
            ]
        }
        try:
            async with session.post("https://api.yandex.cloud/gpt/v1/completions", json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    card_data = json.loads(data["choices"][0]["message"]["content"])
                    return ProductCard(**card_data)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT API: {response.status}")
                    return ProductCard(
                        title="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        features=["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"],
                        image_url="https://via.placeholder.com/512x512.png?text=Error"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex GPT: {e}")
            return ProductCard(
                title="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                features=["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"],
                image_url="https://via.placeholder.com/512x512.png?text=Error"
            )

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞
async def add_lead_to_bitrix24(user_id: str, username: str, service: str):
    if not BITRIX24_WEBHOOK:
        logger.warning("Bitrix24 webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞")
        return
    payload = {
        "fields": {
            "TITLE": f"–õ–∏–¥ –æ—Ç Telegram: {username}",
            "SOURCE_ID": "TELEGRAM",
            "ASSIGNED_BY_ID": 1,
            "COMMENTS": f"–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —É—Å–ª—É–≥–µ: {service}",
            "UF_CRM_1634567890": user_id
        }
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BITRIX24_WEBHOOK}/crm.lead.add.json", json=payload) as response:
                if response.status == 200:
                    logger.info(f"–õ–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {username}, —É—Å–ª—É–≥–∞: {service}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ Bitrix24: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ YooKassa (–ÆKassa)
async def create_payment_link(user_id: str, service: str, tariff: str, amount: float) -> str:
    if not (YANDEX_CHECKOUT_KEY and YANDEX_CHECKOUT_SHOP_ID):
        logger.warning("YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
        return "https://upak.space/payment-not-configured"
    
    import base64
    payment_id = str(uuid.uuid4())
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è YooKassa API - Basic Auth
    auth_string = base64.b64encode(f"{YANDEX_CHECKOUT_SHOP_ID}:{YANDEX_CHECKOUT_KEY}".encode()).decode()
    
    payload = {
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": "https://upak.space/payment-success"},
        "capture": True,
        "description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff} –¥–ª—è {service} (ID: {user_id})",
        "metadata": {"user_id": user_id, "service": service, "tariff": tariff},
        "receipt": {
            "customer": {
                "email": f"user_{user_id}@upak.space"
            },
            "items": [
                {
                    "description": f"–¢–∞—Ä–∏—Ñ {tariff.upper()} –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã UPAK",
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{amount:.2f}",
                        "currency": "RUB"
                    },
                    "vat_code": "1",
                    "payment_mode": "full_payment",
                    "payment_subject": "service"
                }
            ]
        }
    }
    
    headers = {
        "Idempotence-Key": payment_id,
        "Authorization": f"Basic {auth_string}",
        "Content-Type": "application/json"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.yookassa.ru/v3/payments",
                json=payload,
                headers=headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {data.get('id')}")
                    return data["confirmation"]["confirmation_url"]
                else:
                    response_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ YooKassa: {response.status}, Response: {response_text}")
                    return "https://upak.space/payment-error"
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return "https://upak.space/payment-error"

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Yandex Metrika
async def track_event(user_id: str, event: str):
    if not YANDEX_METRIKA_ID:
        logger.warning("Yandex Metrika –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥")
        return
    async with aiohttp.ClientSession() as session:
        try:
            await session.get(
                f"https://mc.yandex.ru/metrika/tag.js?counter={YANDEX_METRIKA_ID}&event={event}&user_id={user_id}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Yandex Metrika: {e}")

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "Unknown"
    await track_event(user_id, "start_command")
    await add_lead_to_bitrix24(user_id, username, "–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")

    keyboard = [
        [
            InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data='free_demo'),
            InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='choose_plan')
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –û UPAK", callback_data='about'),
            InlineKeyboardButton("üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data='how_it_works')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UPAK! üöÄ\n\n"
        "üéØ *–°–æ–∑–¥–∞–≤–∞–π, –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π, –ü—Ä–æ–≤–µ—Ä—è–π*\n\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ Wildberries –∏ Ozon:\n"
        "‚Ä¢ üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ò–ò\n"
        "‚Ä¢ ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ üìä A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω!"
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    username = query.from_user.username or "Unknown"
    await query.answer()

    # –ù–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã —Å–æ–≥–ª–∞—Å–Ω–æ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω—É
    tariff_plans = {
        "free": {"price": 0, "name": "Free"},
        "basic": {"price": 990, "name": "Basic"},
        "pro": {"price": 4990, "name": "Pro"},
        "enterprise": {"price": "custom", "name": "Enterprise"}
    }

    if query.data == 'free_demo':
        await add_lead_to_bitrix24(user_id, username, "free_demo_start")
        await track_event(user_id, "free_demo_activated")
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
        if redis_client:
            redis_client.setex(f"demo_{user_id}", 3600, json.dumps({
                "status": "active", 
                "plan": "free",
                "timestamp": datetime.utcnow().isoformat()
            }))
        
        demo_text = (
            "üÜì *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            "‚úÖ *–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
            "‚Ä¢ 1-2 –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏\n\n"
            "üöÄ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –¥–µ–º–æ-–∫–∞—Ä—Ç–æ—á–∫—É!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíé –£–ª—É—á—à–∏—Ç—å –¥–æ Basic", callback_data='upgrade_basic')],
            [InlineKeyboardButton("üìã –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data='choose_plan')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(demo_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data == 'choose_plan':
        await add_lead_to_bitrix24(user_id, username, "view_pricing")
        await track_event(user_id, "view_pricing_plans")
        
        pricing_text = (
            "üíé *–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã UPAK*\n\n"
            "üÜì *Free* ‚Äî 0 ‚ÇΩ/–º–µ—Å\n"
            "‚Ä¢ 1-2 –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –í–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö\n\n"
            "‚≠ê *Basic* ‚Äî 990 ‚ÇΩ/–º–µ—Å\n"
            "‚Ä¢ –î–ª—è –ò–ü –∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã\n"
            "‚Ä¢ –ë–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤\n\n"
            "üî• *Pro* ‚Äî 4,990 ‚ÇΩ/–º–µ—Å\n"
            "‚Ä¢ –î–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
            "‚Ä¢ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            "üè¢ *Enterprise* ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ\n"
            "‚Ä¢ –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n"
            "‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üÜì Free", callback_data='select_free')],
            [InlineKeyboardButton("‚≠ê Basic (990‚ÇΩ)", callback_data='select_basic')],
            [InlineKeyboardButton("üî• Pro (4,990‚ÇΩ)", callback_data='select_pro')],
            [InlineKeyboardButton("üè¢ Enterprise", callback_data='select_enterprise')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(pricing_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data.startswith('select_'):
        plan_type = query.data.replace('select_', '')
        await add_lead_to_bitrix24(user_id, username, f"select_plan_{plan_type}")
        await track_event(user_id, f"plan_selected_{plan_type}")
        
        if plan_type == 'free':
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            query.data = 'free_demo'
            await button_handler(update, context)
            return
            
        elif plan_type == 'enterprise':
            contact_text = (
                "üè¢ *Enterprise –ø–ª–∞–Ω*\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π:\n\n"
                "üìß Email: enterprise@upak.space\n"
                "üí¨ Telegram: @upak_support\n"
                "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            )
            
            keyboard = [
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/upak_support")],
                [InlineKeyboardButton("üìã –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data='choose_plan')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(contact_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        else:
            # Basic –∏–ª–∏ Pro –ø–ª–∞–Ω
            plan_info = tariff_plans[plan_type]
            amount = plan_info["price"]
            plan_name = plan_info["name"]
            
            payment_url = await create_payment_link(user_id, "upak_platform", plan_type, amount)
            
            payment_text = (
                f"üíé *–¢–∞—Ä–∏—Ñ {plan_name}*\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {amount:,} ‚ÇΩ/–º–µ—Å—è—Ü\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            )
            
            if plan_type == 'basic':
                payment_text += (
                    "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
                    "‚Ä¢ –ë–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n"
                    "‚Ä¢ –ü–æ–ª–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤\n"
                    "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                )
            elif plan_type == 'pro':
                payment_text += (
                    "‚Ä¢ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Basic\n"
                    "‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
                    "‚Ä¢ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π\n"
                    "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
                    "‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("üìã –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data='choose_plan')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data.startswith('upgrade_'):
        # –õ–æ–≥–∏–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        plan_type = query.data.replace('upgrade_', '')
        query.data = f'select_{plan_type}'
        await button_handler(update, context)
        return

    elif query.data == 'about':
        about_text = (
            "‚ÑπÔ∏è *–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ UPAK*\n\n"
            "üéØ *–ù–∞—à–∞ –º–∏—Å—Å–∏—è:* –°–æ–∑–¥–∞–≤–∞–π, –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π, –ü—Ä–æ–≤–µ—Ä—è–π\n\n"
            "UPAK ‚Äî —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ Ozon —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n"
            "üî• *–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ò–ò\n"
            "‚Ä¢ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            "‚Ä¢ A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n"
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏\n\n"
            "üåê –°–∞–π—Ç: https://upak.space\n"
            "‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞: support@upak.space\n"
            "üí¨ Telegram: @upak_support"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='choose_plan')],
            [InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data='free_demo')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(about_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data == 'how_it_works':
        how_it_works_text = (
            "üí° *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç UPAK*\n\n"
            "1Ô∏è‚É£ *–°–æ–∑–¥–∞–Ω–∏–µ*\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚Äî –ò–ò —Å–æ–∑–¥–∞—Å—Ç –∫–∞—Ä—Ç–æ—á–∫—É\n\n"
            "2Ô∏è‚É£ *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è*\n"
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏\n\n"
            "3Ô∏è‚É£ *–ü—Ä–æ–≤–µ—Ä–∫–∞*\n"
            "A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–µ—Ç –ª—É—á—à–µ\n\n"
            "4Ô∏è‚É£ *–†–µ–∑—É–ª—å—Ç–∞—Ç*\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏\n\n"
            "üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n"
            "‚Ä¢ +30% –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
            "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 70% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ\n"
            "‚Ä¢ –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –¥–æ +50%"
        )
        
        keyboard = [
            [InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='free_demo')],
            [InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='choose_plan')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(how_it_works_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data == 'create_another':
        await track_event(user_id, "create_another_card")
        create_text = (
            "üé® *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞."
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data='choose_plan')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='about')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(create_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data == 'view_analytics':
        await track_event(user_id, "view_analytics_request")
        analytics_text = (
            "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            "üöÄ *–°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ!*\n"
            "–í –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\n"
            "‚Ä¢ üìà –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º\n"
            "‚Ä¢ üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å A/B —Ç–µ—Å—Ç–æ–≤\n"
            "‚Ä¢ üìã –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
            "‚Ä¢ üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å ROI –æ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫\n\n"
            "–£–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –∑–∞–ø—É—Å–∫–µ!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É", callback_data='create_another')],
            [InlineKeyboardButton("üíé –£–ª—É—á—à–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='choose_plan')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(analytics_text, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "Unknown"
    user_text = update.message.text
    await track_event(user_id, "text_input")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–º–æ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
    demo_status = redis_client.get(f"demo_{user_id}") if redis_client else None
    
    if demo_status and json.loads(demo_status).get("status") == "active":
        user_plan = json.loads(demo_status).get("plan", "free")
        
        await update.message.reply_text(
            "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞...\n"
            f"üìä –¢–∞—Ä–∏—Ñ: {user_plan.capitalize()}\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card = await generate_card_data(user_text, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º —Ç–∞—Ä–∏—Ñ–∞
        if user_plan == "free":
            caption = f"üÜì *–î–ï–ú–û-–ö–ê–†–¢–û–ß–ö–ê* üÜì\n\n*{card.title}*\n\n{card.description}\n\n"
            caption += "\n".join([f"‚Ä¢ {feature}" for feature in card.features])
            caption += "\n\n‚ö†Ô∏è *–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏*"
        else:
            caption = f"*{card.title}*\n\n{card.description}\n\n"
            caption += "\n".join([f"‚Ä¢ {feature}" for feature in card.features])
        
        await update.message.reply_photo(photo=card.image_url, caption=caption, parse_mode='Markdown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
        if user_plan == "free":
            keyboard = [
                [InlineKeyboardButton("üíé –£–ª—É—á—à–∏—Ç—å –¥–æ Basic (990‚ÇΩ)", callback_data='upgrade_basic')],
                [InlineKeyboardButton("üî• –£–ª—É—á—à–∏—Ç—å –¥–æ Pro (4,990‚ÇΩ)", callback_data='upgrade_pro')],
                [InlineKeyboardButton("üìã –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data='choose_plan')]
            ]
            follow_up_text = (
                "‚ú® *–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–∞—Ä—Ç–æ—á–∫–∞?*\n\n"
                "üéØ –° –ø–ª–∞—Ç–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
                "‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n"
                "‚Ä¢ –ë–æ–ª—å—à–µ –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
                "‚Ä¢ A/B-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É", callback_data='create_another')],
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data='view_analytics')]
            ]
            follow_up_text = "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?"
            
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(follow_up_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –¥–µ–º–æ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É
        keyboard = [
            [InlineKeyboardButton("üÜì –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", callback_data='free_demo')],
            [InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='choose_plan')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_back_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω.\n"
            "üéÅ –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–∞—Ä—Ç–æ—á–µ–∫!"
        )
        
        await update.message.reply_text(welcome_back_text, reply_markup=reply_markup, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ
async def demo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "Unknown"
    await track_event(user_id, "demo_command")
    await add_lead_to_bitrix24(user_id, username, "demo_command_used")

    keyboard = [
        [InlineKeyboardButton("üÜì –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", callback_data='free_demo')],
        [InlineKeyboardButton("üíé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data='choose_plan')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    demo_text = (
        "üéØ *–î–µ–º–æ-—Ä–µ–∂–∏–º UPAK*\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        "–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ò–ò\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
        "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n"
        "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–∞—á–∞–ª–∞:"
    )
    
    await update.message.reply_text(demo_text, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("demo", demo))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç UPAK –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()