#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ UPAK
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
"""

import sys
import os
import asyncio
import json
from unittest.mock import Mock, AsyncMock
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
os.environ["TELEGRAM_TOKEN"] = "test_token_123456"
os.environ["YANDEX_GPT_API_KEY"] = "test_yandex_key"
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
try:
    from bot import generate_card_data, ProductCard, add_lead_to_bitrix24, create_payment_link, track_event
    print("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

async def test_product_card_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö ProductCard"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å ProductCard...")
    
    try:
        # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        card = ProductCard(
            title="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞" * 10,  # –î–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            features=["–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 3"],
            image_url="https://cdn.dribbble.com/userupload/43069729/file/original-40e331a12ec6a78feb8d653ab7eadfca.png?resize=400x0"
        )
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ ProductCard —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        try:
            long_title = "x" * 150  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 100 —Å–∏–º–≤–æ–ª–æ–≤
            ProductCard(
                title=long_title,
                description="–û–ø–∏—Å–∞–Ω–∏–µ",
                features=["–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ"],
                image_url="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/Russian_playing_card_deck_%28face_cards%29_Russian_style_1911_original.jpg/960px-Russian_playing_card_deck_%28face_cards%29_Russian_style_1911_original.jpg"
            )
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ProductCard: {e}")

async def test_generate_card_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º generate_card_data...")
    
    try:
        # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å fallback
        card = await generate_card_data("–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", "test_user_123")
        
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è generate_card_data —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - Title: {card.title}")
        print(f"   - Description length: {len(card.description)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   - Features count: {len(card.features)}")
        print(f"   - Image URL: {card.image_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è fallback (–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
        if card.title == "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏":
            print("‚úÖ Fallback –¥–ª—è –æ—à–∏–±–∫–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_card_data: {e}")

async def test_bitrix_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Bitrix24"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º add_lead_to_bitrix24...")
    
    try:
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ –¥–∞–∂–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ webhook
        await add_lead_to_bitrix24("test_user_123", "test_username", "test_service")
        print("‚úÖ add_lead_to_bitrix24 —Ä–∞–±–æ—Ç–∞–µ—Ç (–±–µ–∑ webhook —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ add_lead_to_bitrix24: {e}")

async def test_payment_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º create_payment_link...")
    
    try:
        payment_url = await create_payment_link("test_user_123", "upak_platform", "basic", 990.0)
        print(f"‚úÖ create_payment_link —Ä–∞–±–æ—Ç–∞–µ—Ç: {payment_url}")
        
        # –ë–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Yandex.Checkout –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞
        if "payment-not-configured" in payment_url:
            print("‚úÖ Fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ create_payment_link: {e}")

async def test_analytics_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º track_event...")
    
    try:
        await track_event("test_user_123", "test_event")
        print("‚úÖ track_event —Ä–∞–±–æ—Ç–∞–µ—Ç (–±–µ–∑ Yandex Metrika —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ track_event: {e}")

def test_environment_variables():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ["TELEGRAM_TOKEN", "YANDEX_GPT_API_KEY"]
    optional_vars = ["BITRIX24_WEBHOOK", "YANDEX_CHECKOUT_KEY", "YANDEX_METRIKA_ID", "REDIS_URL"]
    
    for var in required_vars:
        if os.getenv(var):
            print(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print(f"‚ùå {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)")
    
    for var in optional_vars:
        if os.getenv(var):
            print(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print(f"‚ÑπÔ∏è  {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ UPAK")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    test_environment_variables()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    await test_product_card_model()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await test_generate_card_data()
    await test_bitrix_integration()
    await test_payment_integration()
    await test_analytics_integration()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω:")
    print("1. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π TELEGRAM_TOKEN –æ—Ç @BotFather")
    print("2. –ü–æ–ª—É—á–∏—Ç—å YANDEX_GPT_API_KEY –¥–ª—è –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(main())
